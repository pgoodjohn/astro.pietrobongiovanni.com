---
import Layout from "../layouts/DefaultLayout.astro";
import { getCollection } from "astro:content";
import FormattedDate from "../components/FormattedDate.astro";
import LastCommit from "../components/LastCommit.astro";
import { TWITTER_URL, GITHUB_URL } from "../consts";

// Get the 1 most recent blog posts
const recentPosts = (
	await getCollection("blog", ({ data }) => {
		return import.meta.env.PROD ? data.draft !== true : true;
	})
)
	.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf())
	.slice(0, 1);
---

<Layout>
	<div class="container mx-auto px-4 py-16 max-w-3xl font-mono">
		<!-- Hero Section -->
		<div class="text-center mb-16">
			<h1 class="text-4xl md:text-5xl font-bold mb-2">
				I am Pietro<span class="text-indigo-500">.</span>
			</h1>

			<div class="p-4 inline-block mb-6">
				<p class="text-lg">
					I like to make things with software<span
						class="text-indigo-500">.</span
					>
				</p>
			</div>

			<div class="flex justify-center space-x-6">
				<a
					href={TWITTER_URL}
					aria-label="Twitter"
					title="Twitter"
					target="_blank"
					rel="noopener noreferrer"
					class="text-gray-500 hover:text-indigo-500 transition-colors"
				>
					<svg
						xmlns="http://www.w3.org/2000/svg"
						viewBox="0 0 16 16"
						width="24"
						height="24"
						class="fill-current"
					>
						<path
							d="M5.026 15c6.038 0 9.341-5.003 9.341-9.334 0-.14 0-.282-.006-.422A6.685 6.685 0 0 0 16 3.542a6.658 6.658 0 0 1-1.889.518 3.301 3.301 0 0 0 1.447-1.817 6.533 6.533 0 0 1-2.087.793A3.286 3.286 0 0 0 7.875 6.03a9.325 9.325 0 0 1-6.767-3.429 3.289 3.289 0 0 0 1.018 4.382A3.323 3.323 0 0 1 .64 6.575v.045a3.288 3.288 0 0 0 2.632 3.218 3.203 3.203 0 0 1-.865.115 3.23 3.23 0 0 1-.614-.057 3.283 3.283 0 0 0 3.067 2.277A6.588 6.588 0 0 1 .78 13.58a6.32 6.32 0 0 1-.78-.045A9.344 9.344 0 0 0 5.026 15z"
						></path>
					</svg>
				</a>
				<LastCommit />
			</div>
		</div>

		<!-- Recent Posts Section -->
		<div class="mb-12">
			<h2
				class="text-lg font-medium mb-8 text-gray-500 uppercase tracking-wider"
			>
				Recent Writing
			</h2>
			<ul class="space-y-6">
				{
					recentPosts.map((post) => (
						<li class="post-item">
							<a href={`/blog/${post.id}/`} class="block">
								<div class="flex items-baseline">
									<span class="font-medium text-gray-900 hover:text-indigo-500 transition-colors">
										{post.data.title}
									</span>
									<span class="ml-2 text-xs text-gray-400">
										<FormattedDate
											date={post.data.pubDate}
										/>
									</span>
								</div>
								<div class="hidden post-description">
									<div class="pt-3 pb-1 text-sm text-gray-600">
										<p>{post.data.description}</p>
									</div>
								</div>
							</a>
						</li>
					))
				}
			</ul>
			<div class="mt-8">
				<a
					href="/blog"
					class="text-sm text-gray-500 hover:text-indigo-500 transition-colors"
				>
					â†’ all posts
				</a>
			</div>
		</div>
	</div>
</Layout>

<script>
	// Simple hover effect to show/hide post descriptions
	document.addEventListener("DOMContentLoaded", () => {
		const postItems = document.querySelectorAll(".post-item");

		postItems.forEach((item) => {
			const description = item.querySelector(
				".post-description",
			) as HTMLElement | null;
			let timeout: ReturnType<typeof setTimeout>;

			if (description) {
				// Show description on mouseenter
				item.addEventListener("mouseenter", () => {
					clearTimeout(timeout);
					// Hide all other descriptions first
					document
						.querySelectorAll(".post-description")
						.forEach((desc) => {
							if (desc !== description) {
								desc.classList.add("hidden");
							}
						});

					// Show this description with a nice fade-in
					description.classList.remove("hidden");
					description.style.opacity = "0";
					description.style.maxHeight = "0";

					// Force reflow
					void description.offsetWidth;

					// Animate in
					description.style.transition =
						"opacity 500ms ease, max-height 500ms ease";
					description.style.opacity = "1";
					description.style.maxHeight = "9rem";
				});

				// Hide description on mouseleave with delay
				item.addEventListener("mouseleave", () => {
					timeout = setTimeout(() => {
						if (description) {
							description.style.opacity = "0";
							description.style.maxHeight = "0";

							// Hide after animation completes
							setTimeout(() => {
								description.classList.add("hidden");
							}, 500);
						}
					}, 300); // 300ms delay before starting to hide
				});
			}
		});
	});
</script>

<style>
	.post-item {
		border-bottom: 1px solid rgba(229, 231, 235, 0.5);
		padding-bottom: 0.75rem;
		cursor: pointer;
	}

	.post-item:last-child {
		border-bottom: none;
	}
</style>
