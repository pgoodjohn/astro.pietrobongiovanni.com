---
import HeaderLink from "./HeaderLink.astro";
import { SITE_TITLE } from "../consts";
---

<header
	class="fixed top-0 left-0 right-0 bg-white z-10 py-4 border-b border-gray-100 shadow-sm"
>
	<div class="container mx-auto px-4">
		<nav class="flex justify-between items-center font-mono">
			<h2 class="text-xl font-medium">
				<a
					href="/"
					class="text-gray-800 hover:text-indigo-500 transition-colors"
				>
					{SITE_TITLE}
				</a>
			</h2>

			<!-- Mobile menu button with hamburger/X animation -->
			<button
				id="mobile-menu-button"
				class="lg:hidden text-gray-600 focus:outline-none relative w-6 h-6"
				aria-label="Toggle menu"
			>
				<div class="hamburger-icon">
					<span class="hamburger-bar hamburger-bar-1"></span>
					<span class="hamburger-bar hamburger-bar-2"></span>
					<span class="hamburger-bar hamburger-bar-3"></span>
				</div>
			</button>

			<!-- Desktop navigation -->
			<div class="hidden lg:flex lg:space-x-6">
				<HeaderLink
					href="/"
					class="text-gray-600 hover:text-indigo-500 transition-colors"
					>Home</HeaderLink
				>
				<HeaderLink
					href="/blog"
					class="text-gray-600 hover:text-indigo-500 transition-colors"
					>Blog</HeaderLink
				>
				<!-- Projects dropdown for desktop -->
				<div class="relative group">
					<button
						class="flex items-center space-x-1 text-indigo-500 transition-colors focus:outline-none"
						aria-expanded="false"
						aria-haspopup="true"
					>
						<span>Projects</span>
						<svg
							xmlns="http://www.w3.org/2000/svg"
							class="h-4 w-4 transition-transform duration-200 text-indigo-500 group-hover:rotate-180"
							fill="none"
							viewBox="0 0 24 24"
							stroke="currentColor"
						>
							<path
								stroke-linecap="round"
								stroke-linejoin="round"
								stroke-width="2"
								d="M19 9l-7 7-7-7"></path>
						</svg>
					</button>
					<div
						class="dropdown-menu absolute left-0 mt-2 w-48 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 z-50"
						style="max-width: calc(100vw - 16px);"
					>
						<div
							class="py-1"
							role="menu"
							aria-orientation="vertical"
						>
							<a
								href="/lists"
								class="block px-4 py-2 text-sm text-gray-700 hover:bg-indigo-50 hover:text-indigo-500"
								role="menuitem">Lists</a
							>
							<a
								href="/iss"
								class="block px-4 py-2 text-sm text-gray-700 hover:bg-indigo-50 hover:text-indigo-500"
								role="menuitem">ISS Tracker</a
							>
						</div>
					</div>
				</div>
			</div>
		</nav>

		<!-- Mobile navigation -->
		<div
			id="mobile-menu"
			class="mobile-menu-closed lg:hidden overflow-hidden transition-all duration-300 ease-in-out max-h-0"
		>
			<div
				class="flex flex-col space-y-4 py-4 opacity-0 transform translate-y-4 transition-all duration-300 ease-in-out"
				id="mobile-menu-links"
			>
				<HeaderLink
					href="/"
					class="text-gray-600 hover:text-indigo-500 transition-colors"
					>Home</HeaderLink
				>
				<HeaderLink
					href="/blog"
					class="text-gray-600 hover:text-indigo-500 transition-colors"
					>Blog</HeaderLink
				>
				<!-- Projects dropdown for mobile -->
				<div class="relative">
					<button
						id="mobile-projects-button"
						class="flex items-center justify-between w-full text-left text-indigo-500 transition-colors focus:outline-none"
						aria-expanded="false"
						aria-haspopup="true"
					>
						<span>Projects</span>
						<svg
							xmlns="http://www.w3.org/2000/svg"
							class="h-4 w-4 transition-transform duration-200 text-indigo-500"
							id="mobile-projects-icon"
							fill="none"
							viewBox="0 0 24 24"
							stroke="currentColor"
						>
							<path
								stroke-linecap="round"
								stroke-linejoin="round"
								stroke-width="2"
								d="M19 9l-7 7-7-7"></path>
						</svg>
					</button>
					<div
						id="mobile-projects-dropdown"
						class="max-h-0 overflow-hidden transition-all duration-300 ease-in-out pl-4"
					>
						<div class="pt-2 pb-1 space-y-2">
							<a
								href="/lists"
								class="block text-gray-600 hover:text-indigo-500 transition-colors"
								>Lists</a
							>
							<a
								href="/iss"
								class="block text-gray-600 hover:text-indigo-500 transition-colors"
								>ISS Tracker</a
							>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</header>

<!-- Spacer to prevent content from being hidden under the fixed header -->
<div class="h-20"></div>

<style>
	.mobile-menu-open {
		max-height: 300px; /* Adjust based on your menu height */
	}

	.mobile-menu-closed {
		max-height: 0;
	}

	.menu-links-visible {
		opacity: 1 !important;
		transform: translateY(0) !important;
	}

	/* Dropdown positioning for responsive behavior */
	.dropdown-menu.right-0 {
		left: auto;
		right: 0;
	}

	/* Hamburger to X animation styles */
	.hamburger-icon {
		position: relative;
		width: 100%;
		height: 100%;
	}

	.hamburger-bar {
		position: absolute;
		left: 0;
		height: 2px;
		width: 100%;
		background-color: currentColor;
		border-radius: 2px;
		transition: all 0.25s ease-in-out;
	}

	.hamburger-bar-1 {
		top: 25%;
	}

	.hamburger-bar-2 {
		top: 50%;
		transform: translateY(-50%);
	}

	.hamburger-bar-3 {
		bottom: 25%;
	}

	/* X state */
	.menu-button-active .hamburger-bar-1 {
		top: 50%;
		transform: translateY(-50%) rotate(45deg);
	}

	.menu-button-active .hamburger-bar-2 {
		opacity: 0;
	}

	.menu-button-active .hamburger-bar-3 {
		bottom: 50%;
		transform: translateY(50%) rotate(-45deg);
	}

	/* Mobile Projects dropdown expanded state */
	.mobile-dropdown-expanded {
		max-height: 100px !important;
	}

	.rotate-icon {
		transform: rotate(180deg);
	}
</style>

<script>
	// Toggle mobile menu
	document.addEventListener("DOMContentLoaded", () => {
		const mobileMenuButton = document.getElementById("mobile-menu-button");
		const mobileMenu = document.getElementById("mobile-menu");
		const mobileMenuLinks = document.getElementById("mobile-menu-links");
		const mobileProjectsButton = document.getElementById(
			"mobile-projects-button",
		);
		const mobileProjectsDropdown = document.getElementById(
			"mobile-projects-dropdown",
		);
		const mobileProjectsIcon = document.getElementById(
			"mobile-projects-icon",
		);

		// Position the dropdown menus correctly based on available space
		const positionDropdowns = () => {
			const dropdowns = document.querySelectorAll(".dropdown-menu");
			dropdowns.forEach((dropdown) => {
				const rect = dropdown.getBoundingClientRect();
				const parent = dropdown.parentElement;

				// Only reposition if it doesn't already have a positioning class or if it's not visible yet
				if (!dropdown.classList.contains("positioned")) {
					// Check if dropdown would extend beyond the viewport width
					if (parent && rect.right > window.innerWidth) {
						dropdown.classList.add("right-0");
						dropdown.classList.remove("left-0");
					} else {
						dropdown.classList.add("left-0");
						dropdown.classList.remove("right-0");
					}
					// Mark as positioned so we don't keep repositioning it while hovering links
					dropdown.classList.add("positioned");
				}
			});
		};

		// Position dropdowns on load and resize
		positionDropdowns();
		window.addEventListener("resize", () => {
			// Remove positioned class on resize so we can recalculate
			document.querySelectorAll(".dropdown-menu").forEach((dropdown) => {
				dropdown.classList.remove("positioned");
			});
			positionDropdowns();
		});

		// Reposition dropdowns when they become visible
		document.querySelectorAll(".group").forEach((group) => {
			group.addEventListener("mouseenter", () => {
				// Small timeout to ensure the dropdown is visible for getBoundingClientRect
				setTimeout(positionDropdowns, 10);
			});

			// Remove the positioned class when mouse leaves the dropdown area
			group.addEventListener("mouseleave", () => {
				const dropdown = group.querySelector(".dropdown-menu");
				if (dropdown) {
					dropdown.classList.remove("positioned");
				}
			});
		});

		if (mobileMenuButton && mobileMenu && mobileMenuLinks) {
			mobileMenuButton.addEventListener("click", () => {
				// Toggle menu open/closed classes
				mobileMenu.classList.toggle("mobile-menu-closed");
				mobileMenu.classList.toggle("mobile-menu-open");

				// Toggle button active state
				mobileMenuButton.classList.toggle("menu-button-active");

				// Add a slight delay for the links animation
				if (mobileMenu.classList.contains("mobile-menu-open")) {
					setTimeout(() => {
						mobileMenuLinks.classList.add("menu-links-visible");
					}, 150);
				} else {
					mobileMenuLinks.classList.remove("menu-links-visible");
				}
			});
		}

		// Toggle mobile projects dropdown
		if (
			mobileProjectsButton &&
			mobileProjectsDropdown &&
			mobileProjectsIcon
		) {
			mobileProjectsButton.addEventListener("click", () => {
				mobileProjectsDropdown.classList.toggle(
					"mobile-dropdown-expanded",
				);
				mobileProjectsIcon.classList.toggle("rotate-icon");

				// Update aria-expanded attribute
				const isExpanded = mobileProjectsDropdown.classList.contains(
					"mobile-dropdown-expanded",
				);
				mobileProjectsButton.setAttribute(
					"aria-expanded",
					isExpanded.toString(),
				);
			});
		}
	});
</script>
